(function() {var implementors = {};
implementors['rotor_tools'] = ["impl&lt;M: <a class='trait' href='rotor_tools/timer/trait.Timer.html' title='rotor_tools::timer::Timer'>Timer</a>&gt; <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> for <a class='struct' href='rotor_tools/timer/struct.Ticker.html' title='rotor_tools::timer::Ticker'>Ticker</a>&lt;M&gt;","impl&lt;M: <a class='trait' href='rotor_tools/sync/trait.Replaceable.html' title='rotor_tools::sync::Replaceable'>Replaceable</a>&gt; <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> for <a class='struct' href='rotor_tools/sync/struct.Mutexed.html' title='rotor_tools::sync::Mutexed'>Mutexed</a>&lt;M&gt;",];implementors['rotor_stream'] = ["impl&lt;P: <a class='trait' href='rotor_stream/trait.Protocol.html' title='rotor_stream::Protocol'>Protocol</a>&gt; <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> for <a class='struct' href='rotor_stream/struct.Stream.html' title='rotor_stream::Stream'>Stream</a>&lt;P&gt;","impl&lt;M, A, S&gt; <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> for <a class='enum' href='rotor_stream/enum.Accept.html' title='rotor_stream::Accept'>Accept</a>&lt;M, A&gt; <span class='where'>where A: <a class='trait' href='mio/io/trait.TryAccept.html' title='mio::io::TryAccept'>TryAccept</a>&lt;Output=S&gt; + <a class='trait' href='mio/io/trait.Evented.html' title='mio::io::Evented'>Evented</a> + <a class='trait' href='https://doc.rust-lang.org/nightly/core/any/trait.Any.html' title='core::any::Any'>Any</a>, S: <a class='trait' href='rotor_stream/trait.StreamSocket.html' title='rotor_stream::StreamSocket'>StreamSocket</a>, M: <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> + <a class='trait' href='rotor_stream/trait.Accepted.html' title='rotor_stream::Accepted'>Accepted</a>&lt;S&gt;</span>","impl&lt;P: <a class='trait' href='rotor_stream/trait.Protocol.html' title='rotor_stream::Protocol'>Protocol</a>&gt; <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> for <a class='struct' href='rotor_stream/struct.Persistent.html' title='rotor_stream::Persistent'>Persistent</a>&lt;P&gt; <span class='where'>where P: <a class='trait' href='rotor_stream/trait.Protocol.html' title='rotor_stream::Protocol'>Protocol</a>, P::Seed: <a class='trait' href='https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html' title='core::clone::Clone'>Clone</a>, P::Socket: <a class='trait' href='rotor_stream/trait.ActiveStream.html' title='rotor_stream::ActiveStream'>ActiveStream</a>, P::Socket::Address: <a class='trait' href='https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html' title='core::fmt::Debug'>Debug</a></span>",];implementors['rotor_http'] = ["impl&lt;P&gt; <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> for <a class='struct' href='rotor_http/server/struct.Stream.html' title='rotor_http::server::Stream'>Stream</a>&lt;P&gt; <span class='where'>where P: <a class='trait' href='rotor_stream/protocol/trait.Protocol.html' title='rotor_stream::protocol::Protocol'>Protocol</a></span>","impl&lt;M, A, S&gt; <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> for <a class='enum' href='rotor_http/server/enum.Accept.html' title='rotor_http::server::Accept'>Accept</a>&lt;M, A&gt; <span class='where'>where A: <a class='trait' href='mio/io/trait.TryAccept.html' title='mio::io::TryAccept'>TryAccept</a>&lt;Output=S&gt; + <a class='trait' href='mio/io/trait.Evented.html' title='mio::io::Evented'>Evented</a> + <a class='trait' href='https://doc.rust-lang.org/nightly/core/any/trait.Any.html' title='core::any::Any'>Any</a>, M: <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> + <a class='trait' href='rotor_stream/accept/trait.Accepted.html' title='rotor_stream::accept::Accepted'>Accepted</a>&lt;S&gt;, S: <a class='trait' href='rotor_stream/trait.StreamSocket.html' title='rotor_stream::StreamSocket'>StreamSocket</a></span>","impl&lt;P&gt; <a class='trait' href='rotor/machine/trait.Machine.html' title='rotor::machine::Machine'>Machine</a> for <a class='struct' href='rotor_stream/persistent/struct.Persistent.html' title='rotor_stream::persistent::Persistent'>Persistent</a>&lt;P&gt; <span class='where'>where P: <a class='trait' href='rotor_stream/protocol/trait.Protocol.html' title='rotor_stream::protocol::Protocol'>Protocol</a> + <a class='trait' href='rotor_stream/protocol/trait.Protocol.html' title='rotor_stream::protocol::Protocol'>Protocol</a>, P::<a class='trait' href='rotor_stream/protocol/trait.Protocol.html' title='rotor_stream::protocol::Protocol'>Seed</a>: <a class='trait' href='https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html' title='core::clone::Clone'>Clone</a>, P::<a class='trait' href='rotor_stream/protocol/trait.Protocol.html' title='rotor_stream::protocol::Protocol'>Socket</a>: <a class='trait' href='rotor_stream/trait.ActiveStream.html' title='rotor_stream::ActiveStream'>ActiveStream</a>, P::<a class='trait' href='rotor_stream/protocol/trait.Protocol.html' title='rotor_stream::protocol::Protocol'>Socket</a>::<a class='trait' href='rotor_stream/trait.ActiveStream.html' title='rotor_stream::ActiveStream'>Address</a>: <a class='trait' href='https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html' title='core::fmt::Debug'>Debug</a></span>",];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
